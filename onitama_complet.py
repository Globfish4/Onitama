import random as rdimport numpy as npdef demarage():    print("Bienvenue dans Onitama")    mode = -1    while mode not in [1, 2, 3]:        mode = int(input("Choisissez votre mode de jeu:\n1 - Partie Normale\n2 - Esprit du Vent\n3 - La Voie du Maitre\n"))    if mode == 1:        plat = Plateau(5, 5, 0)        plat.remplir_plateau_vanilla()        plat.choisir_cartes(cartes_liste)        for k in plat.cartes:            print(k.name)            print(k)        print(plat)        plat.simulation()    if mode == 2:        dif = int(input("Choisissez la puissance de l'esprit du vent\n1 - Calme\n2 - Brise du matin\n3 - Vent léger\n4 - Tempête\n5 - Ouragan\n6 - ONITAMA DOIT MOURIR.\n"))        plat = Plateau(5, 5, 1)        plat.remplir_plateau_vent()        plat.choisir_cartes(cartes_liste,cartes_vent_liste,dif - 1)        for k in plat.cartes:            print(k.name)            print(k)        print(plat)        plat.simulation()    if mode == 3:        plat = Plateau(5, 5, 0)        plat.remplir_plateau_vanilla()        plat.choisir_cartes(cartes_sp_liste)        for k in plat.cartes:            print(k.name)            print(k)        print(plat)        plat.simulation()                          def input_piece(joueur):    piece = -1    while piece not in [joueur.pieces[k].numero_pion for k in range(len(joueur.pieces))]:  # on exclue le roi pour ce choix car on suppose qu'il est vivant        piece = int(input("choisir une pièce : \n 0 : Roi, 1-4 : piece\n"))    if joueur.i_joueur == 2:        if piece == 0:            return piece        else:            return 5 - piece    return piecedef input_carte(i_joueur, plateau):    if i_joueur == 1:        j = 0    else:        j = 2    carte = 0    while carte not in [1, 2]:        carte = int(input("quelle carte voulez-vous utiliser ? 1 ou 2\n//-1 pour retour//\n"))        if carte == -1:            return (-1, -1)    nb_max = plateau.cartes[j + carte].nb_deplacement_possible    i = -1    while i < 0 or i > nb_max:        i = int(input("quel déplacement?\n//-1 pour retour\n//"))        if i == -1:            return (-1, -1)        if i < 0 or i > nb_max:            print("déplacement non-existant")    return j + carte, i - 1def input_carte_vent(i_joueur, plateau):    if i_joueur == 1:        j = 0    else:        j = 2    carte = 0    while carte not in [1, 2]:        carte = int(input("quelle carte voulez-vous utiliser ? 1 ou 2\n//-1 pour retour//\n"))        if carte == -1 or carte == '':            return (-1, -1)    return j + cartedef input_piece_carte_vent(carte, joueur, plateau):    if joueur.i_joueur == 1:        j = 0    else:        j = 2    piece = -2    while piece + 1 not in [joueur.pieces[k].numero_pion for k in range(len(joueur.pieces))]:        piece = int(input("choisir une pièce : \n 0 : Roi, 1-4 : piece\n"))    nb_max = plateau.cartes[carte].nb_deplacement_possible[0]    i = -1    while i < 0 or i > nb_max:        i = int(input("quel deplacement ? 1 ou 2\n//-1 pour retour//\n"))        if i == -1:            return (-1, -1)        if i < 0 or i > nb_max:            print("déplacement non-existant")    return piece, i - 1def input_deplacement_vent(carte, plateau):    nb_max = plateau.cartes[carte].nb_deplacement_possible[1]    i = -1    while i < 0 or i > nb_max:        i = int(input("quel déplacement?\n//-1 pour retour\n//"))        if i == -1:            return (-1, -1)        if i < 0 or i > nb_max:            print("déplacement non-existant")    return i - 1def input_piece_carte_normale(carte, joueur, plateau):    if joueur.i_joueur == 1:        j = 0    else:        j = 2    piece = -2    while piece not in [joueur.pieces[k].numero_pion for k in range(len(joueur.pieces))] and piece not in [5]:        piece = int(input("choisir une pièce : \n 0 : Roi, 1-4 : piece, 5 : Esprit du vent\n"))    nb_max = plateau.cartes[carte].nb_deplacement_possible    i = -1    while i < 0 or i > nb_max:        i = int(input("quel déplacement?\n//-1 pour retour\n//"))        if i == -1:            return(-1, -1)        if i < 0 or i > nb_max:            print("déplacement non-existant")    return piece, i - 1            class Plateau(list):    def __init__(self, xmax, ymax, mode):        super().__init__()        self.xmax = xmax        self.ymax = ymax        self.cartes = []        self.joueurs = []        self.mode = mode            def remplir_plateau_vanilla(self):        # initialise le plateau avec les pions et les joueurs        self.joueurs.append(Joueur(1))        self.joueurs.append(Joueur(2))        R1, R2 = Roi(2, 4, 1, self), Roi(2, 0, 2, self)        self.append(R1)        self.append(R2)        self.joueurs[0].pieces.append(R1)        self.joueurs[1].pieces.append(R2)        for k in range(4):            if k < 2:                p1, p2 = Pion(k, 4, 1, self, k + 1), Pion(k, 0, 2, self, 5 - k - 1)            elif k >= 2:                p1, p2 = Pion(k + 1, 4, 1, self, k + 1), Pion(k + 1, 0, 2, self, 5 - k - 1)            self.append(p1)            self.append(p2)            self.joueurs[0].pieces.append(p1)            self.joueurs[1].pieces.append(p2)    def remplir_plateau_vent(self):                 # initialise le plateau avec les pions et les joueurs        V = Esprit_vent(self)        self.append(V)        self.joueurs.append(Joueur(1))        self.joueurs.append(Joueur(2))        R1, R2 = Roi(2, 4, 1, self), Roi(2, 0, 2, self)        self.append(R1)        self.append(R2)        self.joueurs[0].pieces.append(R1)        self.joueurs[1].pieces.append(R2)        for k in range(4):            if k < 2:                p1, p2 = Pion(k, 4, 1, self, k + 1), Pion(k, 0, 2, self, 5 - k - 1)            elif k >= 2:                p1, p2 = Pion(k + 1, 4, 1, self, k + 1), Pion(k + 1, 0, 2, self, 5 - k - 1)            self.append(p1)            self.append(p2)            self.joueurs[0].pieces.append(p1)            self.joueurs[1].pieces.append(p2)    def remplir_plateau_test_vent(self):        V = Esprit_vent(self)        self.append(V)        self.joueurs.append(Joueur(1))        self.joueurs.append(Joueur(2))        R1, R2 = Roi(2, 1, 1, self), Roi(2, 3, 2, self)        self.append(R1)        self.append(R2)        self.joueurs[0].pieces.append(R1)        self.joueurs[1].pieces.append(R2)        P1,P2= Pion(1, 2, 1, self, 1),Pion(3, 2, 2, self, 1)        self.append(P1)        self.append(P2)        self.joueurs[0].pieces.append(P1)        self.joueurs[0].pieces.append(P2)    def choisir_cartes(self, cartes_liste,cartes_vent = [], n_vent = 0):        # initialise la liste des cartes            n = len(cartes_liste)        m = len(cartes_vent)        L, M = list(range(n)), list(range(m))        rd.shuffle(L) #renvoie un arrangement aleatoire de nombres entre 0 et 15        rd.shuffle(M)        if n_vent == 0:            L = list(range(n))            for k in range(5):                self.cartes.append(cartes_liste[L[k]])        if n_vent == 1:            self.cartes.append(cartes_vent[M[0]])            for k in range(5 - n_vent):                self.cartes.append(cartes_liste[L[k]])        if n_vent == 2:            self.cartes.append(cartes_liste[L[0]])            self.cartes.append(cartes_vent[M[0]])            self.cartes.append(cartes_liste[L[1]])            self.cartes.append(cartes_vent[M[1]])            self.cartes.append(cartes_liste[L[2]])        if n_vent == 3:            self.cartes.append(cartes_liste[M[0]])            self.cartes.append(cartes_vent[M[1]])            self.cartes.append(cartes_liste[L[0]])            self.cartes.append(cartes_vent[M[2]])            self.cartes.append(cartes_liste[L[1]])        if n_vent == 4:            self.cartes.append(cartes_liste[L[0]])            for k in range(4):                self.cartes.append(cartes_vent[M[k]])        if n_vent == 5:            for k in range(5):                self.cartes.append(cartes_vent[M[k]])                                        def gagner(self, joueur, i_victoire):        if i_victoire == 1:            msg = "par la voie de la pierre."        else:            msg = "par la voie du ruisseau."        print("Le joueur " + str(joueur.i_joueur) + " gagne " + msg)    def tour_joueur(self, joueur):        valid = False # indicateur de si le coup demandé par le joueur est possible ou non        while not valid:            piece = input_piece(joueur)  # int                        carte, i = input_carte(joueur.i_joueur, self)  # j=0 si joueur1 et 2 si joueur2                        if joueur.i_joueur == 1:                j = 0            else:                j = 2            if (carte,i) != (-1, -1):                carte_object = self.cartes[carte]                valid = joueur.pieces[piece].deplacer(carte_object, i, joueur.i_joueur)         self.cartes[carte], self.cartes[0] = self.cartes[0], self.cartes[carte]        # échange des cartes dans la liste self.cartes        #### attention à l'ordre d'échange    def tour_joueur_vent(self, joueur):        valid = False        while not valid:            carte = input_carte_vent(joueur.i_joueur, self)            if joueur.i_joueur == 1:                j = 0            else:                j = 2            if self.cartes[carte].carte_vent == True:                valid2 = False                while valid2 == False:                    piece, i = input_piece_carte_vent(carte, joueur,self)                    if (piece, i) != (-1, -1):                        carte_object = self.cartes[carte]                        valid2 = joueur.pieces[piece].deplacer(carte_object, i, joueur.i_joueur, 0)                valid3 = False                print(self)                while valid3 == False:                    i = input_deplacement_vent(carte, self) #ok                    if i != (-1, -1):                        valid3 = self[0].deplacer(carte_object, i, joueur.i_joueur, 1)                valid = True            else:                piece, i = input_piece_carte_normale(carte, joueur,self)                if (piece, i) != (-1, -1):                    carte_object = self.cartes[carte]                    if piece == 5:                        valid = self[0].deplacer(carte_object, i, joueur.i_joueur)                    else:                        valid = joueur.pieces[piece].deplacer(carte_object, i, joueur.i_joueur, 0)        self.cartes[carte], self.cartes[0] = self.cartes[0], self.cartes[carte]    def check_tour(self, joueur, adversaire):        # 1, vérifier que le pion déplacé n'ait pas atteri sur un autre pion        # 2, vérifier si le pion déplacé a atteri sur la case royale adverse        joueur.prendre_pion(adversaire)                if joueur.condition_victoire(adversaire)[0]:            self.gagner(joueur, joueur.condition_victoire(adversaire)[1])            return True        return False    def simulation(self):        # fonction qui decide de quel joueur doit jouer et quand la partie termine        if self.mode == 0:            tour = Plateau.tour_joueur        else:            tour = Plateau.tour_joueur_vent        i_debut = self.cartes[0].i_debut        Niteration = 0        fin_partie = False        print( "Le joueur " + str(i_debut) + " commence")        while not fin_partie:            if (i_debut + Niteration - 1) % 2 == 0:                print("###Tour n°" + str(Niteration // 2 + 1) + " joueur 1###\n \n")                tour(self,(self.joueurs[0]))                fin_partie = self.check_tour(self.joueurs[0], self.joueurs[1])            else:                print("###Tour n°" + str(Niteration // 2 + 1) + " joueur 2###\n \n")                tour(self,(self.joueurs[1]))                fin_partie = self.check_tour(self.joueurs[1], self.joueurs[0])            Niteration += 1                        if fin_partie == False:                for k in self.cartes:                    print(k.name)                    print(k)                print(self)    def __str__(self):        tab = ""        for j in range(self.ymax):  # abscisse            for i in range(self.xmax):  # ordonnée                chre = 00                tab += "."                for piece in self:                    if list(piece.coords) == list(np.array([i, j])):                        tab += piece.car()                        chre += len(piece.car())                tab += (5 - chre) * " "                if i == self.xmax - 1:                    tab += "\n"        tab += "\n"        tab += "Cartes du joueur 1 : " + self.cartes[1].name + " " + self.cartes[2].name + "\n"        tab += "Cartes du joueur 2 : " + self.cartes[3].name + " " + self.cartes[4].name + "\n"        tab += "Carte du centre : " + self.cartes[0].name        return tabclass Piece:    def __init__(self, abscisse, ordonnee, i_joueur, plateau):  # i_joueur = 1 ou 2        self.__coords = np.array([abscisse, ordonnee])        self.i_joueur = i_joueur  # en gros titre de joueur 1 joueur 2        self._plateau = plateau        self._vivante = True    @property    def coords(self):        return self.__coords    @property    def x(self):        return self.__coords[0]    @property    def y(self):        return self.__coords[1]    def new_coords(self, val):        setx = val[0]        sety = val[1]        if val[0] < 0 and self._vivante:            print("Deplacement impossible.")            return False        if val[0] > self._plateau.xmax-1:            print("Deplacement impossible.")            return False        if val[1] < 0 and self._vivante:            print("Deplacement impossible.")            return False        if val[1] > self._plateau.ymax-1:            print("Deplacement impossible.")            return False        if self.i_joueur!=0:                        if list(val)==list(self._plateau[0].coords):                print ("Espace occupé")                return False            for piece in self._plateau.joueurs[self.i_joueur-1].pieces:                                            if list(piece.coords)==list(val):                                    print("Espace occupé")                                    return False        else:                        n=len(self._plateau)            for i in range(1, n):                if list(self._plateau[i].coords) == list(val):                    if self._plateau[i].car()[0] != "R":                        self._plateau[i].__coords, self.__coords = self.__coords, self._plateau[i].__coords                        print("Le pion "+ self._plateau[i].car()+ " a échangé sa position avec l'esprit du vent")                        return True                                                 else:                        print("L'Esprit du Vent ne peut faire vaciller le roi")                        return False                    self.__coords = (setx, sety)        return True    def deplacer(self, carte, i, i_joueur, dep_vent = 0):  # applique new_coords au pion choisi par le déplacement choisi        if carte.carte_vent == False:            coeff = 1            if i_joueur == 2:                coeff = -1                new_coord = self.coords + coeff * carte.moves[i]            valid = self.new_coords(new_coord)             return valid  # retourne un indicateur de si le travail est effectué ou non        else:            coeff = 1            if i_joueur == 2:                coeff = -1                new_coord = self.coords + coeff * carte.moves[dep_vent][i]            valid = self.new_coords(new_coord)             return valid  # retourne un indicateur de si le travail est effectué ou nonclass Pion(Piece):    def __init__(self, abscisse, ordonnee, i_joueur, plateau, num_pion):        super().__init__(abscisse, ordonnee, i_joueur, plateau)        self.numero_pion = num_pion    def mourir(self):        self._vivante = False        print("Un disciple du joueur " + str(self.i_joueur) + " a été capturé." + "\n")        self.__coords = np.array([-1, -1])  # on pose le pion à l'extérieur du plateau    def car(self):        return "P" + str(self.i_joueur) + "," + str(self.numero_pion)class Roi(Piece):    def __init__(self, abscisse, ordonnee, i_joueur, plateau, num_pion = 0):        super().__init__(abscisse, ordonnee, i_joueur, plateau)        self.numero_pion = num_pion    def mourir(self):        self._vivante = False        print("Le Maitre a été capturé")                      if self.i_joueur == 1:            self._plateau.gagner(2, 1)        else:            self._plateau.gagner(1, 1)    def car(self):        return "R" + str(self.i_joueur)class Esprit_vent (Piece):    def __init__(self, plateau):        super().__init__(2, 2, 0, plateau)    def car(self):        return "V"class Carte:    def __init__(self, name, moves, i_debut,carte_vent=False):  # moves est la liste des vecteurs de déplacement de la carte        self.name = name        self.moves = moves  # contient des tuples de deplacement relatif        if carte_vent == False:            self.nb_deplacement_possible = len(self.moves)        else:            self.nb_deplacement_possible = [len(self.moves[0]), len(self.moves[1])]        self.i_debut = i_debut        self.carte_vent = carte_vent    def __str__(self):        if self.carte_vent == False:            A = np.zeros((5, 5))            A[2, 2] = -1            for k in range(self.nb_deplacement_possible):                A[2+self.moves[k][1], 2+self.moves[k][0]] = k + 1            return str(A)        else:            A = np.zeros((5, 5))            A[2, 2] = -1            B = np.zeros((5, 5))            B[2, 2] = -1            for k in range(self.nb_deplacement_possible[0]):                A[2 + self.moves[0][k][1], 2+self.moves[0][k][0]] = k + 1            for k in range(self.nb_deplacement_possible[1]):                B[2+self.moves[1][k][1], 2+self.moves[1][k][0]] = k + 1            return "_"*10+"\n"+str(A)+"\nPieces\n"+str(B)+"\nEsprit du Vent"                       class Joueur:    def __init__(self, i_joueur):        # self.cartes = (0, 0)         self.pieces = []        self.i_joueur = i_joueur    def perdre_pion(self, pion):  # pion est le numero du pion a faire perdre        # à voir en fonction de comment on gère le fait que le joueur ne puisse plus s'en servir        self.pieces.pop(pion)        self.pieces[pion].mourir()    def prendre_pion(self, other):  # self prend un pion à l'autre joueur                for k in range(len(self.pieces)):            for l in range(len(other.pieces)):                if list(self.pieces[k].coords) == list(other.pieces[l].coords):                    other.perdre_pion(l)                    break    def condition_victoire(self, adversaire):        if list(self.pieces[0].coords) == list(np.array([2, 0])) and self.i_joueur == 1:            return True,2        if list(self.pieces[0].coords) == list(np.array([2, 4])) and self.i_joueur == 2:            return True,2        if not adversaire.pieces[0]._vivante:  # si le roi adverse est mort            return True,1        return False,0###cartes###cartes vanilla    tigre = Carte("Tigre", [np.array([0, -2]), np.array([0, 1])], 2)dragon = Carte("Dragon", [np.array([1, 1]), np.array([-1, 1]), np.array([-2, -1]), np.array([2, -1])], 1)grenouille = Carte("Grenouille", [np.array([1, 1]), np.array([2, 0]), np.array([-1, -1])], 1)lapin = Carte("Lapin", [np.array([-1, 1]), np.array([1, -1]), np.array([2, 0])], 1)crabe = Carte("Crabe", [np.array([-2, 0]), np.array([2, 0]), np.array([0, -1])], 2)elephant = Carte("Elephant", [np.array([-1, 0]), np.array([1, 0]), np.array([-1, -1]), np.array([1, -1])], 1)oie = Carte("Oie", [np.array([-1, 0]), np.array([1, 0]), np.array([-1, -1]), np.array([1, 1])], 2)coq = Carte("Coq", [np.array([-1, 0]), np.array([-1, 1]), np.array([1, 0]), np.array([1, -1])], 1)singe = Carte("Singe", [np.array([1, -1]), np.array([-1, 1]), np.array([-1, -1]), np.array([1, 1])], 2)mante = Carte("Mante Religieuse", [np.array([-1, -1]), np.array([1, -1]), np.array([0, 1])], 1)cheval = Carte("Cheval", [np.array([-1, 0]), np.array([0, -1]), np.array([0, 1])], 1)boeuf = Carte("Boeuf", [np.array([0, -1]), np.array([1, 0]), np.array([0, 1])], 1)grue = Carte("Grue", [np.array([0, -1]), np.array([-1, 1]), np.array([1, 1])], 2)sanglier = Carte("Sanglier", [np.array([-1, 0]), np.array([1, 0]), np.array([0, -1])], 1)anguille = Carte("Anguille", [np.array([-1, -1]), np.array([-1, 1]), np.array([1, 0])], 2)cobra = Carte("Cobra", [np.array([-1, 0]), np.array([1, -1]), np.array([1, 1])], 2)##carte sensei pathpanda = Carte("Panda", [np.array([0, -1]), np.array([1, -1]), np.array([-1, 1])], 1)renard = Carte("Renard", [np.array([1, 0]), np.array([1, -1]), np.array([1, 1])], 1)ours = Carte("Ours", [np.array([-1, 1]), np.array([0, -1]), np.array([1, 1])], 2)chien = Carte("Chien", [np.array([-1, 0]), np.array([-1, 1]), np.array([-1, -1])], 2)tanuki = Carte("Tanuki",[np.array([0, -1]), np.array([-1, 1]), np.array([2, -1])], 2)zibeline = Carte("Zibeline", [np.array([-2, 0]), np.array([-1, 1]), np.array([1, -1])], 2)iguane = Carte("Iguane", [np.array([0, -1]), np.array([-2, -1]), np.array([1, 1])], 1)loutre = Carte("Loutre", [np.array([-1, -1]), np.array([0, 2]), np.array([1, 1])], 1)souris = Carte("Souris", [np.array([0, -1]), np.array([1, 0]), np.array([-1, 1])], 2)serpent_de_mer = Carte("Serpent de mer", [np.array([0, -1]), np.array([2, 0]), np.array([-1, 1])], 2)rat = Carte("Rat", [np.array([0, -1]), np.array([-1, 0]), np.array([1, 1])], 1)vipere = Carte("Vipère", [np.array([0, -1]), np.array([-2, 0]), np.array([1, 1])], 1)phenix = Carte("Phénix", [np.array([-2, 0]), np.array([2, 0]), np.array([-1, -1]), np.array([1, -1])], 2)kirin = Carte("Kirin", [np.array([-1, -2]), np.array([1, -2]), np.array([0, 2])], 1)tortue = Carte("Tortue", [np.array([-2, 0]), np.array([2, 0]), np.array([-1, 1]), np.array([1, 1])], 1)girafe = Carte("Girafe", [np.array([-2, -1]), np.array([2, -1]), np.array([0, 1])], 2)##carte esprit du ventaigle = Carte("Aigle", [[np.array([-1, -1]), np.array([1, -1])], [np.array([-2, -2]), np.array([2, -2])]], 1, True)chauve_souris = Carte("Chauve-souris", [[np.array([0, -1]), np.array([0, 1])], [np.array([-2, -1]), np.array([-1, -1]), np.array([1, -1]), np.array([2, -1])]], 2, True)lion = Carte("Lion", [[np.array([-1, 1]), np.array([1, -1])], [np.array([0, -1]), np.array([0, -2])]], 1, True)pieuvre = Carte("Pieuvre", [[np.array([-1, -1]), np.array([1, 1])], [np.array([0, -1]), np.array([1, 0]), np.array([1, 1]), np.array([0, 1]), np.array([-1, 1])]], 2, True)scorpion = Carte("Scorpion", [[np.array([1, -1]), np.array([1, 1])], [np.array([-2, -1]), np.array([-1, -2]), np.array([1, -2]), np.array([2, -1])]], 2, True)faucon = Carte("Faucon", [[np.array([-1, -1]), np.array([-1, 1])], [np.array([-2, -1]), np.array([2, -1]), np.array([2, 0]), np.array([-2, 0])]], 2, True)araignee = Carte("Araignée", [[np.array([1, -2]), np.array([0, 1])], [np.array([-1, -1]), np.array([0, -1]), np.array([1, -1]), np.array([0, 1])]], 1, True)rhinoceros = Carte("Rhinocéros", [[np.array([-1, -1]), np.array([0, 1])], [np.array([0, -1]), np.array([1, -1]), np.array([2, 0]), np.array([-2, 0]), np.array([-1, -1])]], 1, True)cartes_liste = [tigre, dragon, grenouille, lapin, crabe, elephant, oie, coq, singe, mante, cheval, boeuf, grue, sanglier, anguille, cobra]cartes_vent_liste = [aigle, chauve_souris, lion, pieuvre, scorpion, faucon, araignee, rhinoceros]cartes_sp_liste = [panda, renard, ours, chien, tanuki, zibeline, iguane, loutre, souris, serpent_de_mer, rat, vipere, phenix, kirin, tortue, girafe]if __name__ == "__main__":    demarage()